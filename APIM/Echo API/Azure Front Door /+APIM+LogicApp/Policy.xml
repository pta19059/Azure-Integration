<policies>
    <inbound>
        <base />
        <check-header name="X-Azure-FDID" failed-check-httpcode="403" failed-check-error-message="Invalid request." ignore-case="false">
            <value>{{FrontDoorId}}</value>
        </check-header>
        <!-- Check required headers -->
        <choose>
            <when condition="@(context.Request.Headers.ContainsKey("X-Client-Certificate") && context.Request.Headers.ContainsKey("X-Client-Thumbprint"))">
                <!-- Get headers -->
                <set-variable name="certBase64" value="@(context.Request.Headers.GetValueOrDefault("X-Client-Certificate",""))" />
                <set-variable name="providedThumbprint" value="@(context.Request.Headers.GetValueOrDefault("X-Client-Thumbprint","").ToUpperInvariant().Replace(" ", ""))" />
                <!-- Decode certificate from base64 -->
                <set-variable name="certBytes" value="@(Convert.FromBase64String((string)context.Variables["certBase64"]))" />
                <!-- Compute SHA1 thumbprint from certificate bytes -->
                <set-variable name="computedThumbprint" value="@(
                    BitConverter.ToString(System.Security.Cryptography.SHA1.Create().ComputeHash((byte[])context.Variables["certBytes"])).Replace("-", "").ToUpperInvariant()
                )" />
                <!-- Verify thumbprint matches provided thumbprint -->
                <choose>
                    <when condition="@((string)context.Variables["computedThumbprint"] == (string)context.Variables["providedThumbprint"])">
                        <!-- Check if thumbprint exists in APIM loaded certificates -->
                        <choose>
                            <when condition="@(!context.Deployment.Certificates.Any(c => c.Value.Thumbprint.ToUpperInvariant() == (string)context.Variables["computedThumbprint"]))">
                                <!-- Thumbprint not found in APIM certificates -->
                                <return-response>
                                    <set-status code="403" reason="Forbidden" />
                                    <set-body>Client certificate thumbprint is not registered in APIM.</set-body>
                                </return-response>
                            </when>
                            <otherwise>
                                <!-- Thumbprint verified and exists in APIM certificates -->
                                <set-header name="X-Client-Verified" exists-action="override">
                                    <value>true</value>
                                </set-header>
                            </otherwise>
                        </choose>
                    </when>
                    <otherwise>
                        <return-response>
                            <set-status code="401" reason="Unauthorized" />
                            <set-body>Client certificate thumbprint validation failed.</set-body>
                        </return-response>
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-body>Missing X-Client-Certificate or X-Client-Thumbprint headers.</set-body>
                </return-response>
            </otherwise>
        </choose>
        <!-- Conf/Forward Backend -->
        <set-backend-service id="apim-generated-policy" backend-id="LogicApp_la-cms-integraiton-010_project-integ_9a2037d5f1767f3bf62d449fb7e171b6" />
        <set-method id="apim-generated-policy">POST</set-method>
        <rewrite-uri id="apim-generated-policy" template="/manual/paths/invoke/?api-version=2016-06-01&amp;sp=/triggers/manual/run&amp;sv=1.0&amp;sig={{Customers_customer_67d3043381108ebe16178416}}" />
        <set-header id="apim-generated-policy" name="Ocp-Apim-Subscription-Key" exists-action="delete" />
    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound>
        <base />
        <choose>
            <when condition="@((int)context.Response.StatusCode >= 200 && (int)context.Response.StatusCode < 300)">
                <!-- Check if there's response content -->
                <choose>
                    <when condition="@(context.Response.Body.As<string>().Length > 0)">
                        <!-- If there's content, return it as is -->
                        <!-- The content is already available in the response -->
                    </when>
                    <otherwise>
                        <!-- If empty response but success status code, create a standard response -->
                        <set-header name="Content-Type" exists-action="override">
                            <value>application/json</value>
                        </set-header>
                        <set-body>@{
                            var responseObj = new {
                                status = "success",
                                message = "Request processed successfully",
                                timestamp = DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss.fff'Z'"),
                                requestId = context.Response.Headers.GetValueOrDefault("x-ms-request-id", "unknown"),
                                correlationId = context.Response.Headers.GetValueOrDefault("x-ms-correlation-id", "unknown"),
                                workflowRunId = context.Response.Headers.GetValueOrDefault("x-ms-workflow-run-id", "unknown")
                            };
                            return Newtonsoft.Json.JsonConvert.SerializeObject(responseObj);
                        }</set-body>
                    </otherwise>
                </choose>
                <!-- Add helpful headers to track the processing -->
                <set-header name="X-Certificate-Validated" exists-action="override">
                    <value>true</value>
                </set-header>
            </when>
            <otherwise>
                <!-- Error response from Logic App - pass it through -->
            </otherwise>
        </choose>
    </outbound>
    <on-error>
        <base />
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <return-response>
            <set-status code="403" reason="Certification Validation Failed" />
            <set-body>@{
                var errorObj = new {
                    status = "error",
                    message = "Certificate validation failed or backend processing error",
                    timestamp = DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss.fff'Z'")
                };
                return Newtonsoft.Json.JsonConvert.SerializeObject(errorObj);
            }</set-body>
        </return-response>
    </on-error>
</policies>
